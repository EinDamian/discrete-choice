from __future__ import annotations

from ...model.data.functions.FunctionalExpression import FunctionalExpression
from .FunctionController import FunctionController

class DerivativeController(FunctionController):
    """Controller used to control all changes regarding the derivatives"""

    def get_derivatives(self) -> dict[str, FunctionalExpression]:
        """ Accessor method for the derivatves in the model.

        Returns:
            dict[str, FunctionalExpression]: all derivatives, with their respective label as key 
            and their functional expression object as value.
        """
        return self.get_project().get_derivatives()


    def add(self, label: str, function: str):
        """ Addition of a new derivative to the model. Before Addition a safety validation is done.

        Args:
            label (str): label of derivative to be added.
            function (str): user input for the function of the derivative.
        """
        safe_function = self.validate(function)
        if safe_function != None:
            self.get_project().set_derivative(label, function)


    def remove(self, label: str):
        """ Method to remove a derivative specified by its label from the model.

        Args:
            label (str): the label of the derivative to be removed.
        """
        self.get_project().remove_derivative(label)   

    def change(self, label: str, function: str):
        """ The changing of the function of a derivative in the model. 
        The function to be changed is defined through its label. 
        Before the function is changed in the model a safety validation happens.

        Args:
            label (str): The label of the function to be changed.
            function (str): The user input for the new function.
        """
        safe_function = self.validate(function)
        if safe_function != None:
            self.get_project().set_derivative(label, function)

    def get_error_report(self, label: str):
        """ Accessor method for the errors generated by the derivative of the given label.

        Args:
            label (str): label of the derivative.

        Returns:
            ErrorReport: the error report of the specified derivative. 
        """
        return self.get_project().get_derivative_error_report(label)

    def export(self, path: str, label: str|None = None) -> bool:
        """Function to export a derivative as a json file.

        Args:
            path (str): Path to where the File is exported.

        Returns:
            bool: True if export was successful. Else False.
        """
        try:
            self.get_project().export_derivative(label, path)
            return True
        except KeyError:
            return False
        except ValueError:
            return False
        except OSError:
            return False

    def import_(self, path: str) -> bool:
        """Function to import a derivative.

        Args:
            path (str): Path to the File.

        Returns:
            bool: True if import was successful. Else False.
        """
        try:
            derivative = super().import_(path)
            self.add(derivative['label'], derivative['functional_expression']['expression'])
            return True
        except OSError:
            return False
        